import { IncomingForm } from 'formidable';
import { promises as fs } from 'fs';
import { tmpdir } from 'os';
import path from 'path';
import { v4 as uuidv4 } from 'uuid';

export const config = {
  api: {
    bodyParser: false,
  },
};

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    // Save uploaded file
    const data = await new Promise((resolve, reject) => {
      const form = new IncomingForm();
      form.uploadDir = tmpdir();
      form.keepExtensions = true;
      form.parse(req, (err, fields, files) => {
        if (err) return reject(err);
        resolve(files);
      });
    });

    const videoFile = data.video;
    const tempPath = videoFile.filepath;
    const fileExt = path.extname(videoFile.originalFilename);
    const fileName = `${uuidv4()}${fileExt}`;
    
    // Here you would typically:
    // 1. Extract audio from video
    // 2. Send to speech-to-text service
    // 3. Generate subtitles
    
    // Mock response for now
    res.status(200).json({
      subtitles: `1\n00:00:00,000 --> 00:00:05,000\nThis is a sample subtitle generated by the system`,
      downloadUrl: `/api/download/${fileName.replace(fileExt, '.srt')}`,
    });
    
    // Clean up
    await fs.unlink(tempPath);
    
  } catch (error) {
    console.error('Error processing video:', error);
    res.status(500).json({ error: 'Error processing video' });
  }
}
